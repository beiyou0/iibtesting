group 'com.ibm.cio'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    final SPRING_VERSION = '4.3.8.RELEASE'
    final CAMEL_VERSION = '2.18.3'
    final XMLUNIT_VERSION = '1.6'
    final SLF4J_VERSION = '1.7.25'
    final LOGBACK_VERSION = '1.2.3'

    //	logging spring cleaning - use slf4j instead of commons-logging
    runtime "org.slf4j:jcl-over-slf4j:$SLF4J_VERSION"
    runtime "ch.qos.logback:logback-classic:$LOGBACK_VERSION"
    compile "org.slf4j:slf4j-api:$SLF4J_VERSION"

    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.1.1'
    compile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    compile group: 'dom4j', name: 'dom4j', version: '1.6.1'
    compile group: 'jaxen', name: 'jaxen', version: '1.1.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile "org.springframework:spring-context:$SPRING_VERSION"
    compile "org.springframework:spring-test:$SPRING_VERSION"
    compile "org.springframework:spring-tx:$SPRING_VERSION"
    compile "org.springframework:spring-jms:$SPRING_VERSION"
    compile "org.apache.camel:camel-core:$CAMEL_VERSION"
    compile "org.apache.camel:camel-spring-javaconfig:$CAMEL_VERSION"
    compile "org.apache.camel:camel-jms:$CAMEL_VERSION"
    compile "org.apache.camel:camel-http4:$CAMEL_VERSION"
    compile "org.apache.camel:camel-sql:$CAMEL_VERSION"
    compile "org.apache.camel:camel-test-spring:$CAMEL_VERSION"
    compile "xmlunit:xmlunit:$XMLUNIT_VERSION"

    //WMQ
    compile fileTree(dir:'lib', include: '*.jar')
}

configurations {
    all*.exclude module: 'commons-logging' // we use slf4j instead
}

jar {
    manifest {
        attributes 'Main-Class': ''
    }
}

task wrapper(type: Wrapper) { gradleVersion = '3.5' }

task sourcesJar(type: Jar, dependsOn: compileTestJava) {
    classifier = 'tests'
    from sourceSets.test.output.classesDir

    manifest {
        attributes 'Main-Class': 'org.eventfully.testcase.TestRunner',
                'Class-Path': './ ' + configurations.testRuntime.collect {'lib/' + it.getName()}.join(' ')
    }

    destinationDir = file('build/libs/iibtesting')
}

task copyConf(type: Copy, dependsOn: processTestResources) {
    from sourceSets.test.output.resourcesDir
    destinationDir = file('build/libs/iibtesting')
}


task copyLib(type: Copy) {
    from configurations.testRuntime
    destinationDir = file('build/libs/iibtesting/lib')
}

task zipPJ(type: Zip, dependsOn: [sourcesJar, copyLib, copyConf]) {
    archiveName = 'iibtesing.zip'
    from 'build/libs/iibtesting'
    destinationDir = file('build/libs')
}

artifacts {
    archives zipPJ
}